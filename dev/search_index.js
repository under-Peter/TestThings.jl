var documenterSearchIndex = {"docs":
[{"location":"#TestThings.jl-1","page":"Home","title":"TestThings.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package is purely for testing purposes, i.e. figuring out how Continuous Integration (with Travis and Appveyor), documentation (with Documenter.jl) and Coverage work.","category":"page"},{"location":"#Topics-1","page":"Home","title":"Topics","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"nothing, really","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The index contains all the functions in autodocs (maybe)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Autodocs contain all the doc-strings, nice!","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [TestThings]","category":"page"},{"location":"#TestThings.bar-Tuple{Array{#s12,1} where #s12<:Integer}","page":"Home","title":"TestThings.bar","text":"bar(xs::Vector{<:Integer})\n\nLike foo but instead returns the minimum of the values in xs, i.e.\n\nbar(xs) = x mid x leq y quad forall y in xs\n\n\n\n\n\n","category":"method"},{"location":"#TestThings.foo-Tuple{Array{#s13,1} where #s13<:Integer}","page":"Home","title":"TestThings.foo","text":"foo(xs::Vector{<:Integer})\n\nreturn the maximum of the values in xs, i.e.\n\nfoo(xs) = x mid x geq y quad forall y in xs\n\n\n\n\n\n","category":"method"}]
}
